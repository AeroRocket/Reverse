            int color_wanted = 0;

            if (color == 1)
            {
                color_wanted = 2;
            }
            else if (color == 2)
            {
                color_wanted = 1;
            }

            if (y != 7 && board[y + 1, x].color == color_wanted)
            {
                return true;
            }

            else if (x != 7 && board[y, x + 1].color == color_wanted)
            {
                return true;
            }

            else if (y != 0 && board[y - 1, x].color == color_wanted)
            {
                return true;
            }

            else if (x != 0 && board[y, x - 1].color == color_wanted)
            {
                return true;
            }




            else if (y != 7 && x != 0 && board[y + 1, x - 1].color == color_wanted)
            {
                return true;
            }
            else if (y != 7 && x != 7 && board[y + 1, x + 1].color == color_wanted)
            {
                return true;
            }
            else if (y != 0 && x != 0 && board[y - 1, x - 1].color == color_wanted)
            {
                return true;
            }
            else if (y != 0 && x != 7 && board[y - 1, x + 1].color == color_wanted)
            {
                return true;
            }




            else
            {
                return false;
            }

        }

        private void win_check(int x, int y, int color)
        {
            int color_wanted = 0;

            if (color == 1)
            {
                color_wanted = 2;
            }
            else if (color == 2)
            {
                color_wanted = 1;
            }

            List<List<int>> direction = new List<List<int>>();


            int direction_size = 0;


            if (y != 7 && board[y + 1, x].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(1);
                direction_local.Add(0);
                direction.Add(direction_local);
                direction_size += 1;
            }

            else if (x != 7 && board[y, x + 1].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(0);
                direction_local.Add(1);
                direction.Add(direction_local);
                direction_size += 1;
            }

            else if (y != 0 && board[y - 1, x].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(-1);
                direction_local.Add(0);
                direction.Add(direction_local);
                direction_size += 1;
            }

            else if (x != 0 && board[y, x - 1].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(0);
                direction_local.Add(-1);
                direction.Add(direction_local);
                direction_size += 1;
            }




            else if (y != 7 && x != 0 && board[y + 1, x - 1].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(1);
                direction_local.Add(-1);
                direction.Add(direction_local);
                direction_size += 1;
            }
            else if (y != 7 && x != 7 && board[y + 1, x + 1].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(1);
                direction_local.Add(1);
                direction.Add(direction_local);
                direction_size += 1;
            }
            else if (y != 0 && x != 0 && board[y - 1, x - 1].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(-1);
                direction_local.Add(-1);
                direction.Add(direction_local);
                direction_size += 1;
            }
            else if (y != 0 && x != 7 && board[y - 1, x + 1].color == color_wanted)
            {
                List<int> direction_local = new List<int>();
                direction_local.Add(-1);
                direction_local.Add(1);
                direction.Add(direction_local);
                direction_size += 1;
            }


            for (int i = 0; i < direction_size; i++)
            {
                int y_direction = direction[i][0];
                int x_direction = direction[i][1];


                int limit_y;
                int limit_x;

                int range = 7;

                if (y_direction < 0)
                {
                    limit_y = 0;
                }

                else
                {
                    limit_y = 7;
                }


                if (x_direction < 0)
                {
                    limit_x = 0;
                }

                else
                {
                    limit_x = 7;
                }

                int x_tmp = x + x_direction;
                int y_tmp = y + y_direction;


                int y_side = 0;
                int x_side = 0;



                List<List<int>> seen = new List<List<int>>();


                for (int j = 0; j < range; j++)
                {

                    // here work

                    if (board[y_tmp, x_tmp].color == 0)
                    {
                        seen.Clear();
                        break;
                    }
                    if (board[y_tmp, x_tmp].color == color)
                    {
                        change(seen, color);
                        seen.Clear();
                        break;
                    }
                    else
                    {
                        List<int> tmp = new List<int>();
                        tmp.Add(y_tmp);
                        tmp.Add(x_tmp);

                        seen.Add(tmp);
                    }

                    y_tmp += y_direction;
                    x_tmp += x_direction;

                }